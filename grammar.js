/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"commands":4,"EOF":5,"command":6,"forloop":7,"listcommand":8,"HELP":9,"EXIT":10,"FRAMES":11,"print":12,"parameterdecl":13,"javascript":14,"assign":15,"download":16,"use":17,"PUBLISHWORKBOOK":18,"value":19,"CREATESITE":20,"DELETESITE":21,"CREATEPROJECT":22,"DELETEPROJECT":23,"DELETETAG":24,"USE":25,"DOWNLOAD":26,"DOLLAR":27,"ID":28,"EQUALS":29,"PRINT":30,"filter":31,"collect":32,"workbooks":33,"USERS":34,"SITES":35,"DATASOURCES":36,"PROJECTS":37,"frame":38,"WORKBOOKS":39,"STRINGLITERAL":40,"element":41,"variable":42,"parameter":43,"DECIMALDIGITS":44,"PARAMETER":45,"PARENTHESISLEFT":46,"COMMA":47,"PARENTHESISRIGHT":48,"FOR":49,"IN":50,"frameorvariable":51,"oneorseveralcommands":52,"BRACELEFT":53,"BRACERIGHT":54,"FILTER":55,"COLLECT":56,"JAVASCRIPT":57,"BRACKETLEFT":58,"BRACKETRIGHT":59,"FRAME":60,"PASTFRAME":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"HELP",10:"EXIT",11:"FRAMES",18:"PUBLISHWORKBOOK",20:"CREATESITE",21:"DELETESITE",22:"CREATEPROJECT",23:"DELETEPROJECT",24:"DELETETAG",25:"USE",26:"DOWNLOAD",27:"DOLLAR",28:"ID",29:"EQUALS",30:"PRINT",34:"USERS",35:"SITES",36:"DATASOURCES",37:"PROJECTS",39:"WORKBOOKS",40:"STRINGLITERAL",44:"DECIMALDIGITS",45:"PARAMETER",46:"PARENTHESISLEFT",47:"COMMA",48:"PARENTHESISRIGHT",49:"FOR",50:"IN",53:"BRACELEFT",54:"BRACERIGHT",55:"FILTER",56:"COLLECT",57:"JAVASCRIPT",58:"BRACKETLEFT",59:"BRACKETRIGHT",60:"FRAME",61:"PASTFRAME"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[6,3],[17,2],[16,2],[15,4],[12,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[33,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[43,2],[13,9],[7,6],[52,3],[52,1],[31,6],[32,6],[14,1],[41,4],[42,2],[38,2],[38,2],[51,1],[51,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: $$[$0-1].push( $$[$0] ); this.$ = $$[$0-1];  
break;
case 3: this.$ = [$$[$0]] 
break;
case 6: this.$ = { "command": "H" }; 
break;
case 7: this.$ = { "command": "X" }; 
break;
case 8: this.$ = { "command": "F" }; 
break;
case 15: this.$ = { "command" : "publishworkbook", "workbook" : $$[$0] }
break;
case 16: this.$ = { "command" : "createsite", "site" : $$[$0] }
break;
case 17: this.$ = { "command" : "deletesite", "site" : $$[$0] }
break;
case 18: this.$ = { "command" : "createproject", "name" : $$[$0-1], "description" : $$[$0] }
break;
case 19: this.$ = { "command" : "deleteproject", "name" : $$[$0] }
break;
case 20: this.$ = { "command" : "deletetag", "workbook_id" : $$[$0-1], "tag" : $$[$0] }
break;
case 21: this.$ = { "command" : "use", "site": $$[$0] }
break;
case 22: this.$ = { "command" : "download", "value": $$[$0] }
break;
case 23: this.$ = { "command" : "assign", "variable":$$[$0-2], "listcommand": $$[$0]  } 
break;
case 24: this.$ = { "command" : "print", "value" : $$[$0] }
break;
case 28: this.$ = { "command": "LU" }; 
break;
case 29: this.$ = { "command": "LS" }; 
break;
case 30: this.$ = { "command": "LD" }; 
break;
case 31: this.$ = { "command": "LP" }; 
break;
case 33: this.$ = { "command" : "WORKBOOKS", "user": $$[$0] } 
break;
case 34: this.$ = { "value" : "string", "literal" : eval( $$[$0] ) } 
break;
case 40: this.$ =  { "command" : "parameter", "parameter" : $$[$0] } 
break;
case 41: this.$ = { "parameter" : $$[$0-5], "question":eval($$[$0-3]), "default":eval($$[$0-1]) } 
break;
case 42: this.$ = { "command" : "loop", "variable" : $$[$0-3], "framecommand" : $$[$0-1], "commands" : $$[$0] }; 
break;
case 43: this.$ = $$[$0-1] 
break;
case 44: this.$ = [$$[$0]] 
break;
case 45: this.$ = { "command" : "filter", "variable" : $$[$0-3], "framecommand" : $$[$0-1], "javascript" : $$[$0] }; 
break;
case 46: this.$ = { "command" : "collect", "variable" : $$[$0-3], "framecommand" : $$[$0-1], "javascript" : $$[$0] }; 
break;
case 47: this.$ = { "command" : "javascript", "code": $$[$0].replace( '{%', '' ).replace( '%}', '' ) } 
break;
case 48: this.$ = { "command" : "element", "framecommand": $$[$0-3], "index" : parseInt( $$[$0-1] ) }; 
break;
case 49: this.$ = { "value" : "variable", "variable" : $$[$0] }; 
break;
case 50: this.$ = { "command": "frame", "frame": $$[$0] }; 
break;
case 51: this.$ = { "command": "pastframe", "frame": $$[$0] }; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:[1,6],10:[1,7],11:[1,8],12:9,13:10,14:11,15:12,16:13,17:14,18:[1,15],20:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,35],26:[1,34],27:[1,33],30:[1,30],31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],45:[1,31],49:[1,21],55:[1,36],56:[1,37],57:[1,32],60:[1,39],61:[1,40]},{1:[3]},{5:[1,41],6:42,7:4,8:5,9:[1,6],10:[1,7],11:[1,8],12:9,13:10,14:11,15:12,16:13,17:14,18:[1,15],20:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,35],26:[1,34],27:[1,33],30:[1,30],31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],45:[1,31],49:[1,21],55:[1,36],56:[1,37],57:[1,32],60:[1,39],61:[1,40]},{5:[2,3],9:[2,3],10:[2,3],11:[2,3],18:[2,3],20:[2,3],21:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],30:[2,3],34:[2,3],35:[2,3],36:[2,3],37:[2,3],39:[2,3],45:[2,3],49:[2,3],54:[2,3],55:[2,3],56:[2,3],57:[2,3],60:[2,3],61:[2,3]},{5:[2,4],9:[2,4],10:[2,4],11:[2,4],18:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],30:[2,4],34:[2,4],35:[2,4],36:[2,4],37:[2,4],39:[2,4],45:[2,4],49:[2,4],54:[2,4],55:[2,4],56:[2,4],57:[2,4],60:[2,4],61:[2,4]},{5:[2,5],9:[2,5],10:[2,5],11:[2,5],18:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],30:[2,5],34:[2,5],35:[2,5],36:[2,5],37:[2,5],39:[2,5],45:[2,5],49:[2,5],54:[2,5],55:[2,5],56:[2,5],57:[2,5],60:[2,5],61:[2,5]},{5:[2,6],9:[2,6],10:[2,6],11:[2,6],18:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],30:[2,6],34:[2,6],35:[2,6],36:[2,6],37:[2,6],39:[2,6],45:[2,6],49:[2,6],54:[2,6],55:[2,6],56:[2,6],57:[2,6],60:[2,6],61:[2,6]},{5:[2,7],9:[2,7],10:[2,7],11:[2,7],18:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],30:[2,7],34:[2,7],35:[2,7],36:[2,7],37:[2,7],39:[2,7],45:[2,7],49:[2,7],54:[2,7],55:[2,7],56:[2,7],57:[2,7],60:[2,7],61:[2,7]},{5:[2,8],9:[2,8],10:[2,8],11:[2,8],18:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],30:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],39:[2,8],45:[2,8],49:[2,8],54:[2,8],55:[2,8],56:[2,8],57:[2,8],60:[2,8],61:[2,8]},{5:[2,9],9:[2,9],10:[2,9],11:[2,9],18:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],30:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],39:[2,9],45:[2,9],49:[2,9],54:[2,9],55:[2,9],56:[2,9],57:[2,9],60:[2,9],61:[2,9]},{5:[2,10],9:[2,10],10:[2,10],11:[2,10],18:[2,10],20:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],30:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],39:[2,10],45:[2,10],49:[2,10],54:[2,10],55:[2,10],56:[2,10],57:[2,10],60:[2,10],61:[2,10]},{5:[2,11],9:[2,11],10:[2,11],11:[2,11],18:[2,11],20:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],30:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],39:[2,11],45:[2,11],49:[2,11],54:[2,11],55:[2,11],56:[2,11],57:[2,11],60:[2,11],61:[2,11]},{5:[2,12],9:[2,12],10:[2,12],11:[2,12],18:[2,12],20:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],30:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],39:[2,12],45:[2,12],49:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],60:[2,12],61:[2,12]},{5:[2,13],9:[2,13],10:[2,13],11:[2,13],18:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],30:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],39:[2,13],45:[2,13],49:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],60:[2,13],61:[2,13]},{5:[2,14],9:[2,14],10:[2,14],11:[2,14],18:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],30:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],39:[2,14],45:[2,14],49:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],60:[2,14],61:[2,14]},{14:46,19:43,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:51,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:52,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:53,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:54,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:55,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{27:[1,56]},{5:[2,25],9:[2,25],10:[2,25],11:[2,25],18:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],30:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],39:[2,25],45:[2,25],49:[2,25],54:[2,25],55:[2,25],56:[2,25],57:[2,25],60:[2,25],61:[2,25]},{5:[2,26],9:[2,26],10:[2,26],11:[2,26],18:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],30:[2,26],34:[2,26],35:[2,26],36:[2,26],37:[2,26],39:[2,26],45:[2,26],49:[2,26],54:[2,26],55:[2,26],56:[2,26],57:[2,26],60:[2,26],61:[2,26]},{5:[2,27],9:[2,27],10:[2,27],11:[2,27],18:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],30:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],39:[2,27],45:[2,27],49:[2,27],54:[2,27],55:[2,27],56:[2,27],57:[2,27],60:[2,27],61:[2,27]},{5:[2,28],9:[2,28],10:[2,28],11:[2,28],18:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],30:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],39:[2,28],45:[2,28],49:[2,28],54:[2,28],55:[2,28],56:[2,28],57:[2,28],60:[2,28],61:[2,28]},{5:[2,29],9:[2,29],10:[2,29],11:[2,29],18:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],30:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],39:[2,29],45:[2,29],49:[2,29],54:[2,29],55:[2,29],56:[2,29],57:[2,29],60:[2,29],61:[2,29]},{5:[2,30],9:[2,30],10:[2,30],11:[2,30],18:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],30:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],39:[2,30],45:[2,30],49:[2,30],54:[2,30],55:[2,30],56:[2,30],57:[2,30],60:[2,30],61:[2,30]},{5:[2,31],9:[2,31],10:[2,31],11:[2,31],18:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],30:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],39:[2,31],45:[2,31],49:[2,31],54:[2,31],55:[2,31],56:[2,31],57:[2,31],60:[2,31],61:[2,31]},{5:[2,32],9:[2,32],10:[2,32],11:[2,32],18:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],30:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],39:[2,32],45:[2,32],49:[2,32],54:[2,32],55:[2,32],56:[2,32],57:[2,32],60:[2,32],61:[2,32]},{14:46,19:57,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{46:[1,58]},{5:[2,47],9:[2,47],10:[2,47],11:[2,47],18:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],30:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],39:[2,47],40:[2,47],45:[2,47],49:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],60:[2,47],61:[2,47]},{28:[1,59]},{14:46,19:60,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{14:46,19:61,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{27:[1,62]},{27:[1,63]},{14:46,19:64,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{44:[1,65]},{44:[1,66]},{1:[2,1]},{5:[2,2],9:[2,2],10:[2,2],11:[2,2],18:[2,2],20:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],27:[2,2],30:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],39:[2,2],45:[2,2],49:[2,2],54:[2,2],55:[2,2],56:[2,2],57:[2,2],60:[2,2],61:[2,2]},{5:[2,15],9:[2,15],10:[2,15],11:[2,15],18:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],30:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],39:[2,15],45:[2,15],49:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],60:[2,15],61:[2,15]},{5:[2,34],9:[2,34],10:[2,34],11:[2,34],18:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],30:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],39:[2,34],40:[2,34],45:[2,34],49:[2,34],54:[2,34],55:[2,34],56:[2,34],57:[2,34],60:[2,34],61:[2,34]},{5:[2,35],9:[2,35],10:[2,35],11:[2,35],18:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[2,35],30:[2,35],34:[2,35],35:[2,35],36:[2,35],37:[2,35],39:[2,35],40:[2,35],45:[2,35],49:[2,35],54:[2,35],55:[2,35],56:[2,35],57:[2,35],60:[2,35],61:[2,35]},{5:[2,36],9:[2,36],10:[2,36],11:[2,36],18:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],30:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],39:[2,36],40:[2,36],45:[2,36],49:[2,36],54:[2,36],55:[2,36],56:[2,36],57:[2,36],60:[2,36],61:[2,36]},{5:[2,37],9:[2,37],10:[2,37],11:[2,37],18:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],30:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],39:[2,37],40:[2,37],45:[2,37],49:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37],60:[2,37],61:[2,37]},{5:[2,38],9:[2,38],10:[2,38],11:[2,38],18:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],30:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],39:[2,38],40:[2,38],45:[2,38],49:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38],60:[2,38],61:[2,38]},{5:[2,39],9:[2,39],10:[2,39],11:[2,39],18:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],30:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],39:[2,39],40:[2,39],45:[2,39],49:[2,39],54:[2,39],55:[2,39],56:[2,39],57:[2,39],58:[1,67],60:[2,39],61:[2,39]},{28:[1,68],44:[1,69]},{5:[2,16],9:[2,16],10:[2,16],11:[2,16],18:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],30:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],39:[2,16],45:[2,16],49:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],60:[2,16],61:[2,16]},{5:[2,17],9:[2,17],10:[2,17],11:[2,17],18:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],30:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],39:[2,17],45:[2,17],49:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],60:[2,17],61:[2,17]},{14:46,19:70,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{5:[2,19],9:[2,19],10:[2,19],11:[2,19],18:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],30:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],39:[2,19],45:[2,19],49:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],60:[2,19],61:[2,19]},{14:46,19:71,27:[1,50],38:49,40:[1,44],41:45,42:47,43:48,57:[1,32],60:[1,39],61:[1,40]},{28:[1,72]},{5:[2,24],9:[2,24],10:[2,24],11:[2,24],18:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],30:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],39:[2,24],45:[2,24],49:[2,24],54:[2,24],55:[2,24],56:[2,24],57:[2,24],60:[2,24],61:[2,24]},{27:[1,73]},{29:[1,74]},{5:[2,22],9:[2,22],10:[2,22],11:[2,22],18:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],30:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],39:[2,22],45:[2,22],49:[2,22],54:[2,22],55:[2,22],56:[2,22],57:[2,22],60:[2,22],61:[2,22]},{5:[2,21],9:[2,21],10:[2,21],11:[2,21],18:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],30:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],39:[2,21],45:[2,21],49:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],60:[2,21],61:[2,21]},{28:[1,75]},{28:[1,76]},{5:[2,33],9:[2,33],10:[2,33],11:[2,33],18:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],30:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],39:[2,33],45:[2,33],49:[2,33],54:[2,33],55:[2,33],56:[2,33],57:[2,33],60:[2,33],61:[2,33]},{5:[2,50],9:[2,50],10:[2,50],11:[2,50],18:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],30:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],39:[2,50],40:[2,50],45:[2,50],49:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],60:[2,50],61:[2,50]},{5:[2,51],9:[2,51],10:[2,51],11:[2,51],18:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],30:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],39:[2,51],40:[2,51],45:[2,51],49:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51],60:[2,51],61:[2,51]},{44:[1,77]},{5:[2,49],9:[2,49],10:[2,49],11:[2,49],18:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],30:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],39:[2,49],40:[2,49],45:[2,49],49:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],60:[2,49],61:[2,49]},{5:[2,40],9:[2,40],10:[2,40],11:[2,40],18:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],30:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],39:[2,40],40:[2,40],45:[2,40],49:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40],60:[2,40],61:[2,40]},{5:[2,18],9:[2,18],10:[2,18],11:[2,18],18:[2,18],20:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],30:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],39:[2,18],45:[2,18],49:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],60:[2,18],61:[2,18]},{5:[2,20],9:[2,20],10:[2,20],11:[2,20],18:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],30:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],39:[2,20],45:[2,20],49:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],60:[2,20],61:[2,20]},{50:[1,78]},{44:[1,79]},{8:80,31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],55:[1,36],56:[1,37],60:[1,39],61:[1,40]},{50:[1,81]},{50:[1,82]},{59:[1,83]},{27:[1,87],38:85,42:86,51:84,60:[1,39],61:[1,40]},{47:[1,88]},{5:[2,23],9:[2,23],10:[2,23],11:[2,23],18:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],30:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],39:[2,23],45:[2,23],49:[2,23],54:[2,23],55:[2,23],56:[2,23],57:[2,23],60:[2,23],61:[2,23]},{27:[1,87],38:85,42:86,51:89,60:[1,39],61:[1,40]},{27:[1,87],38:85,42:86,51:90,60:[1,39],61:[1,40]},{5:[2,48],9:[2,48],10:[2,48],11:[2,48],18:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],30:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],39:[2,48],40:[2,48],45:[2,48],49:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],60:[2,48],61:[2,48]},{6:93,7:4,8:5,9:[1,6],10:[1,7],11:[1,8],12:9,13:10,14:11,15:12,16:13,17:14,18:[1,15],20:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,35],26:[1,34],27:[1,33],30:[1,30],31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],45:[1,31],49:[1,21],52:91,53:[1,92],55:[1,36],56:[1,37],57:[1,32],60:[1,39],61:[1,40]},{9:[2,52],10:[2,52],11:[2,52],18:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],30:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],39:[2,52],45:[2,52],49:[2,52],53:[2,52],55:[2,52],56:[2,52],57:[2,52],60:[2,52],61:[2,52]},{9:[2,53],10:[2,53],11:[2,53],18:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],30:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],39:[2,53],45:[2,53],49:[2,53],53:[2,53],55:[2,53],56:[2,53],57:[2,53],60:[2,53],61:[2,53]},{28:[1,68]},{40:[1,94]},{14:95,57:[1,32]},{14:96,57:[1,32]},{5:[2,42],9:[2,42],10:[2,42],11:[2,42],18:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],30:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],39:[2,42],45:[2,42],49:[2,42],54:[2,42],55:[2,42],56:[2,42],57:[2,42],60:[2,42],61:[2,42]},{4:97,6:3,7:4,8:5,9:[1,6],10:[1,7],11:[1,8],12:9,13:10,14:11,15:12,16:13,17:14,18:[1,15],20:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,35],26:[1,34],27:[1,33],30:[1,30],31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],45:[1,31],49:[1,21],55:[1,36],56:[1,37],57:[1,32],60:[1,39],61:[1,40]},{5:[2,44],9:[2,44],10:[2,44],11:[2,44],18:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],30:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],39:[2,44],45:[2,44],49:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],60:[2,44],61:[2,44]},{47:[1,98]},{5:[2,45],9:[2,45],10:[2,45],11:[2,45],18:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],30:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],39:[2,45],45:[2,45],49:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45],60:[2,45],61:[2,45]},{5:[2,46],9:[2,46],10:[2,46],11:[2,46],18:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],30:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],39:[2,46],45:[2,46],49:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],60:[2,46],61:[2,46]},{6:42,7:4,8:5,9:[1,6],10:[1,7],11:[1,8],12:9,13:10,14:11,15:12,16:13,17:14,18:[1,15],20:[1,16],21:[1,17],22:[1,18],23:[1,19],24:[1,20],25:[1,35],26:[1,34],27:[1,33],30:[1,30],31:22,32:23,33:24,34:[1,25],35:[1,26],36:[1,27],37:[1,28],38:29,39:[1,38],45:[1,31],49:[1,21],54:[1,99],55:[1,36],56:[1,37],57:[1,32],60:[1,39],61:[1,40]},{40:[1,100]},{5:[2,43],9:[2,43],10:[2,43],11:[2,43],18:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],30:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],39:[2,43],45:[2,43],49:[2,43],54:[2,43],55:[2,43],56:[2,43],57:[2,43],60:[2,43],61:[2,43]},{48:[1,101]},{5:[2,41],9:[2,41],10:[2,41],11:[2,41],18:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],30:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],39:[2,41],45:[2,41],49:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41],60:[2,41],61:[2,41]}],
defaultActions: {41:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 57;
break;
case 1:return 25;
break;
case 2:return 9;
break;
case 3:return 10;
break;
case 4:return 45;
break;
case 5:return 49;
break;
case 6:return 11;
break;
case 7:return 55;
break;
case 8:return 56;
break;
case 9:return 35;
break;
case 10:return 34;
break;
case 11:return 36;
break;
case 12:return 39;
break;
case 13:return 37;
break;
case 14:return 30;
break;
case 15:return 26;
break;
case 16:return 18;
break;
case 17:return 20;
break;
case 18:return 21;
break;
case 19:return 22;
break;
case 20:return 23;
break;
case 21:return 24;
break;
case 22:return 50;
break;
case 23:return 61
break;
case 24:return 60;
break;
case 25:return 28;
break;
case 26:return 40;
break;
case 27:return 44;
break;
case 28:return 27;
break;
case 29:return 46;
break;
case 30:return 48;
break;
case 31:return 53;
break;
case 32:return 54;
break;
case 33:return 58;
break;
case 34:return 59;
break;
case 35:return '-';
break;
case 36:return 29;
break;
case 37:return 47;
break;
case 38:/* skip whitespace */
break;
case 39:return 5;
break;
}
},
rules: [/^(?:\{%.*%\})/,/^(?:use\b)/,/^(?:help\b)/,/^(?:exit\b)/,/^(?:parameter\b)/,/^(?:for\b)/,/^(?:frames\b)/,/^(?:filter\b)/,/^(?:collect\b)/,/^(?:sites\b)/,/^(?:users\b)/,/^(?:datasources\b)/,/^(?:workbooks\b)/,/^(?:projects\b)/,/^(?:print\b)/,/^(?:download\b)/,/^(?:publishworkbook\b)/,/^(?:createsite\b)/,/^(?:deletesite\b)/,/^(?:createproject\b)/,/^(?:deleteproject\b)/,/^(?:deletetag\b)/,/^(?:in\b)/,/^(?:#-)/,/^(?:#)/,/^(?:([a-zA-Z]+))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]{HexDigit}{2})|([u]{HexDigit}{4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]{HexDigit}{2})|([u]{HexDigit}{4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:([0-9]+))/,/^(?:\$)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:-)/,/^(?:=)/,/^(?:,)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}